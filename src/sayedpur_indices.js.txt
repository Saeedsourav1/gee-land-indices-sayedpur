/**
 * Title: Land Cover Indices (NDVI, MNDWI, BSI, NDBI) – Sayedpur
 * Platform: Google Earth Engine
 * Author: [Saeed Sourav]
 * Date: 2025
 * https://github.com/Saeedsourav1/gee-land-indices-sayedpur
 */

//import shapefile and named the variable as region
//choose a point in the map and it will automatically imported as geometry

// Define the region of interest (ROI) from the shapefile geometry
var roi = region.geometry();

// Load a satellite image collection
var collection = ee.ImageCollection('COPERNICUS/S2_HARMONIZED')
  .filterBounds(roi) // Filter images intersection the shapefile
  .filterDate('2024-01-01', '2024-12-31') // Filter by date range
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10)); // Filter by cloud cover

// Function to calculate NDVI = (NIR-RED)/(NIR+RED)
 var calculateNDVI = function(image) {
  var nir = image.select('B8'); // Near-infrared band
  var red = image.select('B4'); // Red band
  var ndvi = nir.subtract(red).divide(nir.add(red)).rename('NDVI');
  return image.addBands(ndvi);
};

// Function to calculate MNDWI
var calculateMNDWI = function(image) {
  var green = image.select('B3'); // Green band
  var swir1 = image.select('B11'); // SWIR1 band
  var mndwi = green.subtract(swir1).divide(green.add(swir1)).rename('MNDWI');
  return image.addBands(mndwi);
};

// Function to calculate BSI
var calculateBSI = function(image) {
  var swir1 = image.select('B11'); // SWIR1 band
  var red = image.select('B4'); // Red band
  var nir = image.select('B8'); // NIR band
  var blue = image.select('B2'); // Blue band
  var bsi = (swir1.add(red).subtract(nir.add(blue)))
            .divide(swir1.add(red).add(nir.add(blue)))
            .rename('BSI');
  return image.addBands(bsi);
};

// Function to calculate NDBI
var calculateNDBI = function(image) {
  var swir1 = image.select('B11'); // SWIR1 band
  var nir = image.select('B8'); // NIR band
  var ndbi = swir1.subtract(nir).divide(swir1.add(nir)).rename('NDBI');
  return image.addBands(ndbi);
};

// Apply all index calculations to the collection
var indexedCollection = collection
  .map(calculateNDVI)
  .map(calculateMNDWI)
  .map(calculateBSI)
  .map(calculateNDBI);


// Create composite images for each index and clip to shapefile
var ndviImage = indexedCollection.select('NDVI').median().clip(roi);
var mndwiImage = indexedCollection.select('MNDWI').median().clip(roi);
var bsiImage = indexedCollection.select('BSI').median().clip(roi);
var ndbiImage = indexedCollection.select('NDBI').median().clip(roi);

// Combine all indices into a single multi-band image
var compositeImage = ee.Image.cat([ndviImage, mndwiImage, bsiImage, ndbiImage])
  .rename(['NDVI', 'MNDWI', 'BSI', 'NDBI']);

// Define visualization parameters for each index
var ndviVisParams = {
  min: -1,
  max: 1,
  palette: ['blue', 'white', 'green']  // Low → Moderate → High NDVI (vegetation)
  // blue = no vegetation, green = dense vegetation
};

var mndwiVisParams = {
  min: -1,
  max: 1,
  palette: ['brown', 'yellow', 'blue'] // Low → Moderate → High MNDWI (water)
  // brown = land, blue = water
};

var bsiVisParams = {
  min: -1,
  max: 1,
  palette: ['lightgray', 'tan', 'saddlebrown'] // Low → Mid → High BSI (bare soil)
  // lightgray = vegetated/covered, saddlebrown = bare soil
};

var ndbiVisParams = {
  min: -1,
  max: 1,
  palette: ['lightgray', 'gray', 'dimgray'] // Low → Mid → High NDBI (built-up)
  // lightgray = natural, dimgray = dense urban
};

// Center the map on the shapefile geometry
Map.centerObject(roi, 10); // Zoom level 10

// Add clipped index layers to the map
Map.addLayer(ndviImage, ndviVisParams, 'Clipped NDVI');
Map.addLayer(mndwiImage, mndwiVisParams, 'Clipped MNDWI');
Map.addLayer(bsiImage, bsiVisParams, 'Clipped BSI');
Map.addLayer(ndbiImage, ndbiVisParams, 'Clipped NDBI');


// Assign NDVI, MNDWI, and NDBI to RGB channels (BSI can be omitted or swapped)
var rgbVisParams = {
  bands: ['NDVI', 'MNDWI', 'NDBI'],
  min: -1,
  max: 1
};

// Center the map on the shapefile geometry
Map.centerObject(roi, 10); // Zoom level 10

// Add the RGB composite as a single layer
Map.addLayer(compositeImage, rgbVisParams, 'RGB Composite (NDVI, MNDWI, NDBI)');

// Create four maps for each index
var ndviMap = ui.Map();
ndviMap.addLayer(ndviImage, ndviVisParams, 'NDVI');
ndviMap.addLayer(roi, {color: 'red'}, 'region');

var mndwiMap = ui.Map();
mndwiMap.addLayer(mndwiImage, mndwiVisParams, 'MNDWI');
mndwiMap.addLayer(roi, {color: 'red'}, 'region');

var bsiMap = ui.Map();
bsiMap.addLayer(bsiImage, bsiVisParams, 'BSI');
bsiMap.addLayer(roi, {color: 'red'}, 'region');

var ndbiMap = ui.Map();
ndbiMap.addLayer(ndbiImage, ndbiVisParams, 'NDBI');
ndbiMap.addLayer(roi, {color: 'red'}, 'region');

// Link the maps to zoom and pan together
var linker = ui.Map.Linker([ndviMap, mndwiMap, bsiMap, ndbiMap]);

// Center all maps on the ROI
ndviMap.centerObject(roi, 10);
mndwiMap.centerObject(roi, 10);
bsiMap.centerObject(roi, 10);
ndbiMap.centerObject(roi, 10);

// Add shapefile outline to the default map (for the RGB composite)
Map.addLayer(roi, {color: 'red'}, 'region');

